
public class List {
    private LinkedList head;

    public List() {
        this.head = null; // При создание односвязного списка будет список пустой

    }

    public boolean isEmpaty() { //  Для проверки является ли он пустым
        return head == null; //
    }

    /* Метод вставки */
    public void add(int data) {
        LinkedList knot = new LinkedList(data);// Создаем список нового узла
        LinkedList currentKnot = head; // Текуший узел(Если допустим нам нужно будет доавбить в конец эта переменная будет дават знать где мы сейчас находимся)
        if (head == null) { // Если головы со всем нет( говорим то что теперь ты голова)
            head = knot; // а сама голова будет равнтся промежуточной переменой
        } else { // Если голова есть
            while (currentKnot.next != null){ // береме текущий узел Перещяемся по списку пока не дойдем до нуля
                currentKnot = currentKnot.next; //
            }
            currentKnot.next = knot; // добрались до последнего элемента и в качестве слудеющего устанавливаем новый узел

        }
//        knot.next = head; // указываем ссылку на следующтй элемент(будем говори промежудчной перемной точто оно будет равняется голове)
//        head = knot; // а сама голова будет ровнятся промежуточной переменой
    }

//    public void remove() {
//        head = head.next; // Делаем удаление  с начала списка(Переуказываем ссылку head на следующую ссылу)
//    }
  /* Удаление по ключу */
    public void removeKey(int key) {
        LinkedList cur = head; // текущая переменная
        LinkedList prev = head; // пердыдующая переменная

        while (cur.data != key) { // будем иди по списку пока наш ключ не будет найдет
            if (isEmpaty()) { // делаем проверку
                System.out.println("Лист пустой");
                return; // выходим
            }
                else {
                prev = cur; // предыдущий эелемент будет равнятся текущему элементу
                cur = cur.next; // текущий элемент пойдет дальше
                }
        }
            if (cur == head)// Определаяем явлется ли наш список головой(Если наш текщий список явлется головой
                head = cur.next;// указываем на следующий элемент
            else
                prev.next = cur.next; // если она не явлется головой то просто говорим предыдущем что тип ты будешь ровнтся текущем элементом
                                    // Предыдущий на следующий после текущего
        }
        public void print () {
            LinkedList knot = head; // Будем проходится от начала самого списка до самого низа
            while (knot != null) { // будет иди пока knot!= null
                System.out.println(knot.data); // выводим в консоль
                knot = knot.next; // увелечили список на единицу
            }
        }


    }
